# -*- coding: utf-8 -*-
"""201112_01_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1im70kOwoK3GjbCSVZA71G_0E2DGQ__IB

* Code powered by Google Colab
"""

from keras.datasets import imdb
import numpy as np

(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)

def vectorize_sequences(sequences, dimension=10000):
    # 크기가 (len(sequences), dimension))이고 모든 원소가 0인 행렬을 만듭니다
    results = np.zeros((len(sequences), dimension))
    for i, sequence in enumerate(sequences):
        results[i, sequence] = 1.  # results[i]에서 특정 인덱스의 위치를 1로 만듭니다
    return results

# 훈련 데이터를 벡터로 변환합니다
X_train = vectorize_sequences(train_data)
# 테스트 데이터를 벡터로 변환합니다
X_test = vectorize_sequences(test_data)

# 레이블을 벡터로 변환합니다
y_train = np.asarray(train_labels).astype('float32')
y_test = np.asarray(test_labels).astype('float32')

from keras import models
from keras import layers

original_model = models.Sequential()
original_model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))
original_model.add(layers.Dense(16, activation='relu'))
original_model.add(layers.Dense(1, activation='sigmoid'))

original_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])

original_model.summary()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
# original_hist=original_model.fit(X_train, y_train, epochs=20, batch_size=512, validation_data=(X_test, y_test))

import matplotlib.pyplot as plt

epochs = range(1, 21)
original_val_loss = original_hist.history['val_loss']

from keras import regularizers

l2_model = models.Sequential()
l2_model.add(layers.Dense(16, kernel_regularizer=regularizers.l2(0.001),
                                          activation='relu', input_shape=(10000,)))
l2_model.add(layers.Dense(16, kernel_regularizer=regularizers.l2(0.001),
                                                 activation='relu'))
l2_model.add(layers.Dense(1, activation='sigmoid'))

l2_model.compile(optimizer='rmsprop',
                 loss='binary_crossentropy',
                 metrics=['acc'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
# l2_model_hist = l2_model.fit(X_train, y_train, epochs=20, batch_size=512, validation_data=(X_test, y_test))

l2_model_val_loss = l2_model_hist.history['val_loss']

plt.plot(epochs, original_val_loss, 'b+', label='Original model')
plt.plot(epochs, l2_model_val_loss, 'bo', label='L2-regularized model')
plt.xlabel('Epochs')
plt.ylabel('Validation loss')
plt.legend()

plt.show()

"""### 실습 2-4
* 기본 모델에 %%time을 붙여 해보고, 시간 확인 후 GPU 모델로 변경하여 다시 시간 확인

* CPU 머신 : 
  * 기본 모델 : 34.6초
  * l2 모델 : 35.8초

* GPU 머신 : 
  * 기본 모델 : 24.3초
  * l2 모델 : 22.6초

* TPU 머신 : 
  * 기본 모델 : 39.3초
  * l2 모델 : 40.0초

### 심화 : Early stopping 적용해보기
"""

# EarlyStopping 정의
from keras.callbacks import EarlyStopping
early_stopping=EarlyStopping(patience=20)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# # EarlyStopping 확인 위해 Epochs=2000으로 변경함.
# original_hist=original_model.fit(X_train, y_train, epochs=2000, batch_size=512, validation_data=(X_test, y_test),callbacks=[early_stopping])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# # EarlyStopping 확인 위해 Epochs=2000으로 변경함.
# l2_model_hist = l2_model.fit(X_train, y_train, epochs=2000, batch_size=512, validation_data=(X_test, y_test),callbacks=[early_stopping])

"""### DropOut"""

dpt_model = models.Sequential()
dpt_model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))
dpt_model.add(layers.Dropout(0.5))

dpt_model.add(layers.Dense(16, activation='relu'))
dpt_model.add(layers.Dropout(0.5))

dpt_model.add(layers.Dense(1, activation='sigmoid'))

dpt_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
# dpt_model_hist = dpt_model.fit(X_train, y_train, epochs=20, batch_size=512, validation_data=(X_test, y_test))

dpt_model_val_loss = dpt_model_hist.history['val_loss']

plt.plot(epochs, original_val_loss, 'b+', label='Original model')
plt.plot(epochs, dpt_model_val_loss, 'bo', label='Dropout-regularized model')
plt.xlabel('Epochs')
plt.ylabel('Validation loss')
plt.legend()

plt.show()

plt.subplot(2,2,1)
plt.plot(epochs, original_model_tr_loss, 'b+', label='Original model loss')
plt.plot(epochs, original_val_loss, 'r+', label='Original model val_loss')
plt.xlabel('Epochs')
plt.ylabel('Original model loss')
plt.ylim(0,1)
plt.legend()

plt.subplot(2,2,2)
plt.plot(epochs, dpt_model_tr_loss, 'bo', label='Dropout-regularized model loss')
plt.plot(epochs, dpt_model_val_loss, 'ro', label='Dropout-regularized model val_loss')
plt.xlabel('Epochs')
plt.ylabel('Dropout-regularized model loss')
plt.ylim(0,1)
plt.legend()

plt.subplot(2,2,3)
plt.plot(epochs, l2_model_tr_loss, 'bo', label='l2-regularized model loss')
plt.plot(epochs, l2_model_val_loss, 'ro', label='l2-regularized model val_loss')
plt.xlabel('Epochs')
plt.ylabel('l2-regularized model loss')
plt.ylim(0,1)
plt.legend()

plt.show()

